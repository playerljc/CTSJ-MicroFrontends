.登陆 React
.主页 React
     .用户管理(一级菜单) React
     .系统管理(一级菜单) React
       .菜单管理 React
       .角色管理 React
       .部门管理 React
     .系统设置(一级菜单) React

.componentWrap监听路由变化，发出路由变化的通知，同样的路由变化只发出一次通知，
 各个subapp根据情况进行订阅，在订阅的方法中进行路由的跳转
.各个subapp在数据流发生变化后都要发送数据流变化的通知，
 主应用接收到subapp的通知之后再改变整体数据流，然后在发送数据流改变的通知，
 各个subapp根据情况进行订阅，在订阅的方法中进行dispatch操作

-------------------------------------------------------------------------------------------------

.公共js库
 .客户端可以设置webpack的externals字段进行排除，在打包的时候不打到里面
 .主应用对客户端使用externals字段排除的js库使用<script>标签的umd引入
 .主应用可以使用webpack的dll技术，把多个externals的js库合并成一个
 .主应用安装css库,如font-awesome，也可以使用umd的css方式，还有公共字体等文件
 .图片资源可以放入主应用的assets文件夹中，使之能在各个客户端进行共用，在文件或less里使用/assets/图片的路径方式即可

// 都是路由组件不用进行子路由测试，只要切换这些能共享数据流就可以
// 高阶一点的操作就是使用嵌套路由，子了路由组件数据流改变发出通知
.加入react-redux数据流菜单
.加入ant-pro(dva)数据流菜单
.加入react-pro(@ctsj/state)数据流菜单
.加入vuex数据流菜单

// 加入一些共享图片

// 加入font-awesome

// 主应用dll合并



.微服务路由和子应用路由嵌套使用存在的问题
 self2 -> 微服务路由
 微服务路由 -> self2

 存在自身切换不改变问题
 子应用的路由组件需要在props改变的时候判断浏览器路径是否变化，如果是变化也要触发路由改变事件
 微服务路由也需要在路由组件props改变进行判断，如果浏览器路径不一致，要触发路由改变事件
